<?php declare( strict_types=1 );

namespace FernleafSystems\Wordpress\Plugin\Shield\Modules\HackGuard\Lib\ScanTables\TableData;

use FernleafSystems\Wordpress\Plugin\Shield\Modules\HackGuard\ModCon;
use FernleafSystems\Wordpress\Plugin\Shield\Modules\HackGuard\Scan\Results\Retrieve;
use FernleafSystems\Wordpress\Plugin\Shield\Utilities\Tool\FormatBytes;
use FernleafSystems\Wordpress\Plugin\Shield\Modules\HackGuard\Scan\Controller\Afs;
use FernleafSystems\Wordpress\Plugin\Shield\Modules\ModConsumer;
use FernleafSystems\Wordpress\Plugin\Shield\Scans;
use FernleafSystems\Wordpress\Services\Core\VOs\Assets\{
	WpPluginVo,
	WpThemeVo
};
use FernleafSystems\Wordpress\Services\Services;

class LoadTableDataMalware extends BaseLoadTableData {

	public function run() :array {
		$RS = $this->getRecordRetriever()->retrieveLatest();
		try {
			$files = array_map(
				function ( $item ) {
					/** @var Scans\Afs\ResultItem $item */
					$data = $item->getRawData();

					$data[ 'rid' ] = $item->VO->scanresult_id;
					$data[ 'file' ] = $item->path_fragment;
					$data[ 'detected_at' ] = $item->VO->created_at;
					$data[ 'detected_since' ] = Services::Request()
														->carbon( true )
														->setTimestamp( $item->VO->created_at )
														->diffForHumans();

					$data[ 'file_as_href' ] = $this->getColumnContent_File( $item );

					$data[ 'status_slug' ] = 'malware';
					$data[ 'status' ] = $this->getColumnContent_FileStatus( $item, __( 'Malware', 'wp-simple-firewall' ) );

					$data[ 'line_numbers' ] = implode( ', ', array_map(
						function ( $line ) {
							return $line + 1;  // because lines start at ZERO
						},
						array_keys( $item->mal_fp_lines )
					) );
					$data[ 'mal_sig' ] = sprintf( '<code style="white-space: nowrap">%s</code>', esc_html( $item->mal_sig ) );
					$data[ 'file_type' ] = strtoupper( Services::Data()->getExtension( $item->path_full ) );
					$data[ 'actions' ] = implode( ' ', $this->getActions( $data[ 'status_slug' ], $item ) );

					return $data;
				},
				$RS->getMalware()->getItems()
			);
		}
		catch ( \Exception $e ) {
			$files = [];
		}

		return $files;
	}

	protected function getRecordRetriever() :Retrieve {
		/** @var ModCon $mod */
		$mod = $this->getMod();
		$retriever = parent::getRecordRetriever();
		$retriever->setScanController( $mod->getScanCon( Afs::SCAN_SLUG ) );
		$retriever->wheres = [
			"`rim`.`meta_key`='is_mal'",
			"`rim`.`meta_value`=1",
		];
		return $retriever;
	}
}