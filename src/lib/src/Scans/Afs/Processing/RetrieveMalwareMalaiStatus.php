<?php declare( strict_types=1 );

namespace FernleafSystems\Wordpress\Plugin\Shield\Scans\Afs\Processing;

use FernleafSystems\Wordpress\Plugin\Shield\Modules\HackGuard\ModConsumer;
use FernleafSystems\Wordpress\Services\Services;
use FernleafSystems\Wordpress\Services\Utilities\Integrations\WpHashes\Malai\{
	QueryMalwareStatusMulti,
	QueryMalwareStatusSingle
};
use FernleafSystems\Wordpress\Plugin\Shield\Modules\HackGuard\DB\Malware\Ops as MalwareDB;

class RetrieveMalwareMalaiStatus {

	use ModConsumer;

	/**
	 * @param MalwareDB\Record[] $records
	 */
	public function updateRecords( array $records ) :void {
		$required = array_filter( $records, function ( $record ) {
			return $this->isRecheckRequired( $record );
		} );
		if ( !empty( $required ) ) {
			$statuses = ( new QueryMalwareStatusMulti() )->retrieve(
				array_map(
					function ( $record ) {
						return $record->hash_sha256;
					},
					$required
				)
			);

			foreach ( $records as $record ) {
				if ( isset( $statuses[ $record->hash_sha256 ] ) ) {
					$this->mod()->getDbH_Malware()->getQueryUpdater()->updateRecord( $record, [
						'malai_status'         => $statuses[ $record->hash_sha256 ],
						'last_malai_status_at' => Services::Request()->ts(),
					] );
					$record->malai_status = $statuses[ $record->hash_sha256 ];
				}
			}
		}
	}

	public function single( MalwareDB\Record $record, bool $forceCheck = false ) :string {

		$status = $record->malai_status;
		if ( $forceCheck || $this->isRecheckRequired( $record ) ) {
			$queryStatus = ( new QueryMalwareStatusSingle() )->retrieve( $record->hash_sha256 );
			if ( !empty( $queryStatus ) ) {
				$status = $queryStatus;
			}
		}

		$status = empty( $status ) ? MalwareStatus::STATUS_UNKNOWN : $status;

		if ( $status !== $record->malai_status ) {
			$this->mod()->getDbH_Malware()->getQueryUpdater()->updateRecord( $record, [
				'malai_status'         => $status,
				'last_malai_status_at' => Services::Request()->ts(),
			] );
		}

		return $status;
	}

	private function isRecheckRequired( MalwareDB\Record $record ) :bool {
		$now = Services::Request()->ts();
		$status = $record->malai_status;
		return empty( $status )
			   || ( $status === MalwareStatus::STATUS_UNKNOWN && ( $now - $record->last_malai_status_at > \DAY_IN_SECONDS ) )
			   || ( $status !== MalwareStatus::STATUS_UNKNOWN && ( $now - $record->last_malai_status_at > \MONTH_IN_SECONDS ) );
	}
}