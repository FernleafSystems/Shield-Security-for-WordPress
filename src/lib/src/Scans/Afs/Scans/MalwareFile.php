<?php declare( strict_types=1 );

namespace FernleafSystems\Wordpress\Plugin\Shield\Scans\Afs\Scans;

use FernleafSystems\Wordpress\Plugin\Shield\Scans\Afs\Exceptions;
use FernleafSystems\Wordpress\Plugin\Shield\Scans\Afs\ScanActionVO;
use FernleafSystems\Wordpress\Services\Utilities\File\ConvertLineEndings;
use FernleafSystems\Wordpress\Services\Utilities\Integrations\WpHashes\Malai\MalwareScan;
use FernleafSystems\Wordpress\Services\Utilities\Integrations\WpHashes\Malai\QueryMalwareStatus;
use FernleafSystems\Wordpress\Services\Utilities\Integrations\WpHashes\Malai\QueryMalwareStatusSingle;

class MalwareFile extends BaseScan {

	private $isValidFile = false;

	/**
	 * @throws Exceptions\MalwareFileException
	 * @throws \InvalidArgumentException
	 */
	public function scan() :bool {
		/** @var ScanActionVO $action */
		$action = $this->getScanActionVO();

		if ( $this->isSupportedFileExt() ) {

			$searcher = ( new LocateNeedles() )->setPath( $this->pathFull );

			foreach ( $action->patterns_raw as $signature ) {
				if ( $searcher->raw( $signature ) ) {
					throw new Exceptions\MalwareFileException(
						$this->pathFull,
						[
							'mal_sig' => $signature,
						]
					);
				}
			}

			foreach ( $action->patterns_iraw as $signature ) {
				if ( $searcher->iRaw( $signature ) ) {
					throw new Exceptions\MalwareFileException(
						$this->pathFull,
						[
							'mal_sig' => $signature,
						]
					);
				}
			}

			foreach ( $action->patterns_regex as $signature ) {
				if ( $searcher->regex( $signature ) ) {
					throw new Exceptions\MalwareFileException(
						$this->pathFull,
						[
							'mal_sig' => $signature,
						]
					);
				}
			}

			foreach ( array_merge( $action->patterns_keywords, $action->patterns_functions ) as $signature ) {
				if ( $searcher->raw( $signature ) ) {
					throw new Exceptions\MalwareFileException(
						$this->pathFull,
						[
							'mal_sig' => $signature,
						]
					);
				}
			}
		}

		return true;
	}

	protected function getSupportedFileExtensions() :array {
		return [ 'php', 'php5', 'php7', 'ico' ];
	}

	public function setFileValidStatus( bool $valid ) :self {
		$this->isValidFile = $valid;
		return $this;
	}
}