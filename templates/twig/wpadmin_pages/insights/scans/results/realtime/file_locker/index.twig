{% import '/common/macros.twig' as icwp_macros %}

<div class="row insights_widget" id="SectionScanResultsFileLocker">
	<div class="col">
		<div class="card card-scan_results">

			<div class="card-body">

				{% if flags.is_restricted %}

					<div class="row">
						<div class="col mt-4 mb-2">
							<h6 class="text-center">
								{{ icwp_macros.svg(imgs.svgs.video) }}
								<a href="#" class="option-video"
								   data-vimeoid="815602380">What is the FileLocker feature</a>?
							</h6>
						</div>
					</div>

					<div class="row">
						<div class="col">
							<div class="alert alert-warning my-3">
								<h6 class="alert-heading">{{ strings.not_available }}</h6>
								<p class="mb-0">
									<a href="{{ hrefs.go_pro }}" target="_blank" class="alert-link"
									>{{ strings.please_upgrade }}</a>
								</p>
							</div>
						</div>
					</div>

				{% else %}
					{% if flags.is_enabled %}
						<div class="col mt-3 mb-3">
							 <div class="input-group m-auto mt-3 mb-3">
								<label class="input-group-text" for="FileLockerFileSelect">
									 Select File To Review</label>
								<select class="form-select mw-100" id="FileLockerFileSelect">
									<option selected value="-">--</option>
									{% for lock_key, file_lock in vars.file_locks.bad %}
										<option value="{{ lock_key }}" class="text-danger">{{ file_lock.path }}</option>
									{% endfor %}
									{% for lock_key, file_lock in vars.file_locks.good %}
										<option value="{{ lock_key }}"
												class="text-success">{{ file_lock.path }}</option>
									{% endfor %}
								</select>
							 </div>
						</div>

						<div class="col">
							<div id="FileLockerDiffContents" class="w-100">
								<div class="alert alert-success">
									<p class="m-0">{{ strings.please_select }}</p>
								</div>
							</div>
						</div>
					{% else %}

						<div class="row">
							<div class="col mt-4 mb-2">
								<h6 class="text-center">
									{{ icwp_macros.svg(imgs.svgs.video) }}
									<a href="#" class="option-video" data-vimeoid="815602380">What is the FileLocker feature</a>?
								</h6>
							</div>
						</div>

						<div class="row">
							<div class="col">
								<div class="alert alert-success my-3">
									<h6 class="alert-heading">{{ strings.not_enabled }}</h6>
									<p class="m-0"><a class="alert-link" href="{{ hrefs.please_enable }}"
										>{{ strings.please_enable }}</a></p>
								</div>
							</div>
						</div>

					{% endif %}
				{% endif %}
			</div>

		</div>
	</div>
</div>

{% if not flags.is_restricted %}
	<script type="text/javascript">
	jQuery( '#FileLockerFileSelect' ).on( 'change', function ( e ) {
		let $this = jQuery( this );
		let current = $this.find( ":selected" ).val();
		if ( current !== '-' ) {
			Shield_AjaxRender
			.send_ajax_req( {
				render_slug: '{{ ajax.filelocker_showdiff }}',
				rid: jQuery( this ).val()
			} )
			.then( ( response ) => {
				if ( response.success ) {
					jQuery( '#FileLockerDiffContents' ).html( response.data.html );
				}
				else {
					alert( response.data.error );
				}
			} )
			.catch( ( error ) => {
				alert( 'Sorry, something went wrong with the request.' );
				console.log( error );
			} );
			jQuery( 'option[value="-"]', $this ).prop( 'selected', true );
		}
	} );

	jQuery( document ).on( 'submit', 'form.filelocker_fileaction', function ( evt ) {
		evt.preventDefault();
		iCWP_WPSF_BodyOverlay.show();
		let ajax_vars ={{ ajax.filelocker_fileaction|raw }};
		let $oButton = jQuery( 'input[type=submit]', this );
		ajax_vars.confirmed = jQuery( 'input[type=checkbox]', this ).is( ':checked' ) ? 1 : 0;
		ajax_vars.rid = $oButton.data( 'rid' );
		ajax_vars.file_action = $oButton.data( 'action' );

		jQuery.post( ajaxurl, ajax_vars,
			function ( oResponse ) {
				let sMessage = '';
				if ( oResponse === null || typeof oResponse.data === 'undefined'
					|| typeof oResponse.data.message === 'undefined' ) {
					sMessage = oResponse.success ? 'Success' : 'Failure';
				}
				else {
					sMessage = oResponse.data.message;
				}
				iCWP_WPSF_Toaster.showMessage( sMessage, oResponse.success );
				if ( oResponse.success ) {
					setTimeout( function () {
						location.reload();
					}, 500 );
				}
			}
		).fail(
			function () {
			}
		).always( function () {
				iCWP_WPSF_BodyOverlay.hide();
			}
		);
		return false;
	} );
</script>
{% endif %}